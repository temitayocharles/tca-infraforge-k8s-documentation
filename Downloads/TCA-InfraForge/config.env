# Enterprise DevOps Lab - Configuration Variables
# This file controls all templated values across the entire system
# Similar to Terraform variables but for our automation system

# ============================================================================
# SYSTEM CONFIGURATION
# ============================================================================

# Profile settings (auto-detected but can be overridden)
DEVOPS_PROFILE=${DEVOPS_PROFILE:-standard}
SYSTEM_MEMORY_GB=${SYSTEM_MEMORY_GB:-8}
SYSTEM_CPU_CORES=${SYSTEM_CPU_CORES:-4}

# ============================================================================
# CLUSTER CONFIGURATION
# ============================================================================

# Cluster naming
CLUSTER_NAME_PREFIX="enterprise-devops"
CLUSTER_NAME="${CLUSTER_NAME_PREFIX}-${DEVOPS_PROFILE}"

# Kubernetes version
K8S_VERSION=${K8S_VERSION:-"v1.28.0"}

# Network configuration
CLUSTER_NETWORK_SUBNET=${CLUSTER_NETWORK_SUBNET:-"172.18.0.0/16"}
SERVICE_SUBNET=${SERVICE_SUBNET:-"10.96.0.0/12"}
POD_SUBNET=${POD_SUBNET:-"10.244.0.0/16"}

# ============================================================================
# CONTAINER IMAGES (Golden Master Images)
# ============================================================================

# Note: These will be replaced with your private registry images
# Format: REGISTRY_URL/namespace/image:tag

# Base registry (will be replaced with your private registry)
PRIVATE_REGISTRY=localhost:5001
FALLBACK_REGISTRY="docker.io"

# Core infrastructure images
REDIS_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}redis:7-alpine"
POSTGRES_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}postgres:15-alpine"
VAULT_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}vault:1.15.0"

# Monitoring stack images
PROMETHEUS_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}prom/prometheus:v2.45.0"
GRAFANA_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}grafana/grafana:10.0.0"
ALERTMANAGER_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}prom/alertmanager:v0.26.0"

# GitOps images
ARGOCD_VERSION=${ARGOCD_VERSION:-"v2.8.4"}
ARGOCD_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}argoproj/argocd:${ARGOCD_VERSION}"

# Service mesh images
ISTIO_VERSION=${ISTIO_VERSION:-"1.18.0"}
ISTIO_PILOT_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}istio/pilot:${ISTIO_VERSION}"
ISTIO_PROXY_IMAGE="${PRIVATE_REGISTRY:+$PRIVATE_REGISTRY/}istio/proxyv2:${ISTIO_VERSION}"

# ============================================================================
# RESOURCE LIMITS BY PROFILE
# ============================================================================

# Memory allocation (automatically calculated based on system memory)
case "$DEVOPS_PROFILE" in
    "minimal")
        REDIS_MEMORY_LIMIT="128m"
        POSTGRES_MEMORY_LIMIT="256m"
        VAULT_MEMORY_LIMIT="128m"
        PROMETHEUS_MEMORY_LIMIT="512m"
        GRAFANA_MEMORY_LIMIT="256m"
        ;;
    "standard")
        REDIS_MEMORY_LIMIT="256m"
        POSTGRES_MEMORY_LIMIT="512m"
        VAULT_MEMORY_LIMIT="256m"
        PROMETHEUS_MEMORY_LIMIT="1Gi"
        GRAFANA_MEMORY_LIMIT="512m"
        ;;
    "medium")
        REDIS_MEMORY_LIMIT="512m"
        POSTGRES_MEMORY_LIMIT="1Gi"
        VAULT_MEMORY_LIMIT="512m"
        PROMETHEUS_MEMORY_LIMIT="2Gi"
        GRAFANA_MEMORY_LIMIT="1Gi"
        ;;
    "large")
        REDIS_MEMORY_LIMIT="1Gi"
        POSTGRES_MEMORY_LIMIT="2Gi"
        VAULT_MEMORY_LIMIT="1Gi"
        PROMETHEUS_MEMORY_LIMIT="4Gi"
        GRAFANA_MEMORY_LIMIT="2Gi"
        ;;
esac

# CPU allocation
case "$DEVOPS_PROFILE" in
    "minimal")
        REDIS_CPU_LIMIT="200m"
        POSTGRES_CPU_LIMIT="500m"
        VAULT_CPU_LIMIT="200m"
        PROMETHEUS_CPU_LIMIT="500m"
        GRAFANA_CPU_LIMIT="200m"
        ;;
    "standard")
        REDIS_CPU_LIMIT="500m"
        POSTGRES_CPU_LIMIT="1000m"
        VAULT_CPU_LIMIT="250m"
        PROMETHEUS_CPU_LIMIT="1000m"
        GRAFANA_CPU_LIMIT="500m"
        ;;
    "medium")
        REDIS_CPU_LIMIT="1000m"
        POSTGRES_CPU_LIMIT="2000m"
        VAULT_CPU_LIMIT="500m"
        PROMETHEUS_CPU_LIMIT="2000m"
        GRAFANA_CPU_LIMIT="1000m"
        ;;
    "large")
        REDIS_CPU_LIMIT="2000m"
        POSTGRES_CPU_LIMIT="4000m"
        VAULT_CPU_LIMIT="1000m"
        PROMETHEUS_CPU_LIMIT="4000m"
        GRAFANA_CPU_LIMIT="2000m"
        ;;
esac

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Database credentials (use secrets in production)
POSTGRES_DB=${POSTGRES_DB:-"devops_db"}
POSTGRES_USER=${POSTGRES_USER:-"devops_user"}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-"$(openssl rand -base64 32)"}

# Redis authentication
REDIS_PASSWORD=${REDIS_PASSWORD:-"$(openssl rand -base64 32)"}

# Vault configuration
VAULT_ROOT_TOKEN=${VAULT_ROOT_TOKEN:-"$(openssl rand -base64 32)"}

# ArgoCD admin password
ARGOCD_ADMIN_PASSWORD=${ARGOCD_ADMIN_PASSWORD:-"$(openssl rand -base64 32)"}

# Grafana admin password
GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-"admin123"}

# ============================================================================
# STORAGE CONFIGURATION
# ============================================================================

# Persistent volume sizes
POSTGRES_STORAGE_SIZE=${POSTGRES_STORAGE_SIZE:-"10Gi"}
REDIS_STORAGE_SIZE=${REDIS_STORAGE_SIZE:-"5Gi"}
PROMETHEUS_STORAGE_SIZE=${PROMETHEUS_STORAGE_SIZE:-"20Gi"}
GRAFANA_STORAGE_SIZE=${GRAFANA_STORAGE_SIZE:-"5Gi"}

# Storage class (auto-detected)
STORAGE_CLASS=${STORAGE_CLASS:-"standard"}

# ============================================================================
# NETWORKING CONFIGURATION
# ============================================================================

# Ingress configuration
INGRESS_CLASS=${INGRESS_CLASS:-"nginx"}
DOMAIN_NAME=${DOMAIN_NAME:-"devops.local"}

# Service ports
GRAFANA_PORT=${GRAFANA_PORT:-"3000"}
ARGOCD_PORT=${ARGOCD_PORT:-"8080"}
PROMETHEUS_PORT=${PROMETHEUS_PORT:-"9090"}
VAULT_PORT=${VAULT_PORT:-"8200"}

# ============================================================================
# BACKUP CONFIGURATION
# ============================================================================

# Backup retention
BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-"7"}
BACKUP_ENCRYPTION=${BACKUP_ENCRYPTION:-"true"}

# Backup storage
BACKUP_STORAGE_TYPE=${BACKUP_STORAGE_TYPE:-"local"}
BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-""}

# ============================================================================
# MONITORING CONFIGURATION
# ============================================================================

# Metrics retention
PROMETHEUS_RETENTION=${PROMETHEUS_RETENTION:-"15d"}
ALERTMANAGER_RETENTION=${ALERTMANAGER_RETENTION:-"5d"}

# Alert routing
ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-""}
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}

# ============================================================================
# CI/CD CONFIGURATION
# ============================================================================

# Git repository for ArgoCD
GIT_REPO_URL=${GIT_REPO_URL:-""}
GIT_BRANCH=${GIT_BRANCH:-"main"}

# Docker registry for built images
BUILD_REGISTRY=${BUILD_REGISTRY:-"localhost:5000"}

# ============================================================================
# FEATURE FLAGS
# ============================================================================

# Enable/disable features based on profile
ENABLE_SERVICE_MESH=${ENABLE_SERVICE_MESH:-"false"}
ENABLE_TRACING=${ENABLE_TRACING:-"false"}
ENABLE_LOGGING=${ENABLE_LOGGING:-"true"}
ENABLE_MONITORING=${ENABLE_MONITORING:-"true"}
ENABLE_BACKUP=${ENABLE_BACKUP:-"true"}
ENABLE_HA=${ENABLE_HA:-"false"}

# Enable HA for medium and large profiles
if [ "$DEVOPS_PROFILE" = "medium" ] || [ "$DEVOPS_PROFILE" = "large" ]; then
    ENABLE_HA="true"
    ENABLE_SERVICE_MESH="true"
    ENABLE_TRACING="true"
fi

# ============================================================================
# VALIDATION
# ============================================================================

# Validate required variables
validate_config() {
    local errors=0
    
    if [ -z "$DEVOPS_PROFILE" ]; then
        echo "ERROR: DEVOPS_PROFILE is not set"
        ((errors++))
    fi
    
    if [ -z "$CLUSTER_NAME" ]; then
        echo "ERROR: CLUSTER_NAME is not set"
        ((errors++))
    fi
    
    if [ "$errors" -gt 0 ]; then
        echo "Configuration validation failed with $errors errors"
        return 1
    fi
    
    echo "Configuration validation passed"
    return 0
}

# Export all variables for use in other scripts
export DEVOPS_PROFILE SYSTEM_MEMORY_GB SYSTEM_CPU_CORES
export CLUSTER_NAME K8S_VERSION
export CLUSTER_NETWORK_SUBNET SERVICE_SUBNET POD_SUBNET
export PRIVATE_REGISTRY FALLBACK_REGISTRY
export REDIS_IMAGE POSTGRES_IMAGE VAULT_IMAGE
export PROMETHEUS_IMAGE GRAFANA_IMAGE ALERTMANAGER_IMAGE
export ARGOCD_IMAGE ISTIO_PILOT_IMAGE ISTIO_PROXY_IMAGE
export REDIS_MEMORY_LIMIT POSTGRES_MEMORY_LIMIT VAULT_MEMORY_LIMIT
export PROMETHEUS_MEMORY_LIMIT GRAFANA_MEMORY_LIMIT
export REDIS_CPU_LIMIT POSTGRES_CPU_LIMIT VAULT_CPU_LIMIT
export PROMETHEUS_CPU_LIMIT GRAFANA_CPU_LIMIT
export POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD
export REDIS_PASSWORD VAULT_ROOT_TOKEN ARGOCD_ADMIN_PASSWORD GRAFANA_ADMIN_PASSWORD
export POSTGRES_STORAGE_SIZE REDIS_STORAGE_SIZE PROMETHEUS_STORAGE_SIZE GRAFANA_STORAGE_SIZE
export STORAGE_CLASS INGRESS_CLASS DOMAIN_NAME
export GRAFANA_PORT ARGOCD_PORT PROMETHEUS_PORT VAULT_PORT
export BACKUP_RETENTION_DAYS BACKUP_ENCRYPTION BACKUP_STORAGE_TYPE
export PROMETHEUS_RETENTION ALERTMANAGER_RETENTION
export ALERT_WEBHOOK_URL SLACK_WEBHOOK_URL
export GIT_REPO_URL GIT_BRANCH BUILD_REGISTRY
export ENABLE_SERVICE_MESH ENABLE_TRACING ENABLE_LOGGING
export ENABLE_MONITORING ENABLE_BACKUP ENABLE_HA

# Load custom overrides if they exist
if [ -f "config.local" ]; then
    echo "Loading local configuration overrides..."
    source config.local
fi

# Validate configuration when sourced
validate_config
